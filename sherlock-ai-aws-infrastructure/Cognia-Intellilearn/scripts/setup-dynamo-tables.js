/**
 * Setup DynamoDB Tables for CognIA IntelliLearn
 * ‚ö†Ô∏è SECURITY: Uses environment variables for AWS credentials
 */

require('dotenv').config({ path: '../.env.local' });

// Validate environment variables
if (!process.env.NEXT_PUBLIC_AWS_ACCESS_KEY_ID || !process.env.NEXT_PUBLIC_AWS_SECRET_ACCESS_KEY) {
  console.error('‚ùå ERROR: AWS credentials not found in environment variables');
  console.error('Please ensure your .env.local file contains:');
  console.error('- NEXT_PUBLIC_AWS_ACCESS_KEY_ID');
  console.error('- NEXT_PUBLIC_AWS_SECRET_ACCESS_KEY');
  process.exit(1);
}

const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
const { 
  CreateTableCommand, 
  DescribeTableCommand,
  ListTablesCommand 
} = require('@aws-sdk/client-dynamodb');

// AWS Configuration from environment variables
const awsConfig = {
  region: process.env.NEXT_PUBLIC_AWS_REGION || 'us-east-1',
  credentials: {
    accessKeyId: process.env.NEXT_PUBLIC_AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.NEXT_PUBLIC_AWS_SECRET_ACCESS_KEY
  }
};

const dynamoClient = new DynamoDBClient(awsConfig);

console.log('üöÄ Setting up DynamoDB tables with secure configuration...');
console.log(`üìç Region: ${awsConfig.region}`);
console.log(`üîê Using credentials from environment variables`);

// Table definitions remain the same...
const TABLES = {
  COURSES: {
    name: 'intellilearn-courses',
    schema: {
      TableName: 'intellilearn-courses',
      KeySchema: [
        { AttributeName: 'id', KeyType: 'HASH' }
      ],
      AttributeDefinitions: [
        { AttributeName: 'id', AttributeType: 'S' }
      ],
      BillingMode: 'PAY_PER_REQUEST'
    }
  },
  MODULES: {
    name: 'intellilearn-modules',
    schema: {
      TableName: 'intellilearn-modules',
      KeySchema: [
        { AttributeName: 'courseId', KeyType: 'HASH' },
        { AttributeName: 'id', KeyType: 'RANGE' }
      ],
      AttributeDefinitions: [
        { AttributeName: 'courseId', AttributeType: 'S' },
        { AttributeName: 'id', AttributeType: 'S' }
      ],
      BillingMode: 'PAY_PER_REQUEST'
    }
  },
  LESSONS: {
    name: 'intellilearn-lessons',
    schema: {
      TableName: 'intellilearn-lessons',
      KeySchema: [
        { AttributeName: 'moduleId', KeyType: 'HASH' },
        { AttributeName: 'id', KeyType: 'RANGE' }
      ],
      AttributeDefinitions: [
        { AttributeName: 'moduleId', AttributeType: 'S' },
        { AttributeName: 'id', AttributeType: 'S' }
      ],
      BillingMode: 'PAY_PER_REQUEST'
    }
  },
  USER_PROGRESS: {
    name: 'intellilearn-user-progress',
    schema: {
      TableName: 'intellilearn-user-progress',
      KeySchema: [
        { AttributeName: 'userId', KeyType: 'HASH' },
        { AttributeName: 'courseId', KeyType: 'RANGE' }
      ],
      AttributeDefinitions: [
        { AttributeName: 'userId', AttributeType: 'S' },
        { AttributeName: 'courseId', AttributeType: 'S' }
      ],
      BillingMode: 'PAY_PER_REQUEST'
    }
  }
}

/**
 * 1. CREAR UNA TABLA EN DYNAMODB
 */
async function createTable(tableConfig) {
  console.log(`\nüèóÔ∏è CREANDO TABLA: ${tableConfig.name}`)
  console.log('=' .repeat(50))
  
  try {
    // Verificar si la tabla ya existe
    try {
      const describeCommand = new DescribeTableCommand({
        TableName: tableConfig.name
      })
      await dynamoClient.send(describeCommand)
      console.log(`‚úÖ TABLA ${tableConfig.name} YA EXISTE`)
      return true
    } catch (error) {
      if (error.name !== 'ResourceNotFoundException') {
        throw error
      }
    }
    
    // Crear la tabla
    const createCommand = new CreateTableCommand(tableConfig.schema)
    const result = await dynamoClient.send(createCommand)
    
    console.log(`‚úÖ TABLA ${tableConfig.name} CREADA EXITOSAMENTE`)
    console.log(`Estado: ${result.TableDescription.TableStatus}`)
    
    // Esperar a que la tabla est√© activa
    console.log('‚è≥ Esperando que la tabla est√© activa...')
    await waitForTableActive(tableConfig.name)
    
    return true
    
  } catch (error) {
    console.error(`‚ùå ERROR AL CREAR TABLA ${tableConfig.name}:`, error.message)
    return false
  }
}

/**
 * 2. ESPERAR A QUE LA TABLA EST√â ACTIVA
 */
async function waitForTableActive(tableName) {
  const maxAttempts = 30
  let attempts = 0
  
  while (attempts < maxAttempts) {
    try {
      const command = new DescribeTableCommand({ TableName: tableName })
      const result = await dynamoClient.send(command)
      
      if (result.Table.TableStatus === 'ACTIVE') {
        console.log(`‚úÖ TABLA ${tableName} EST√Å ACTIVA`)
        return true
      }
      
      console.log(`‚è≥ Tabla ${tableName} estado: ${result.Table.TableStatus} (intento ${attempts + 1}/${maxAttempts})`)
      await new Promise(resolve => setTimeout(resolve, 2000))
      attempts++
      
    } catch (error) {
      console.error(`‚ùå ERROR AL VERIFICAR TABLA ${tableName}:`, error.message)
      attempts++
      await new Promise(resolve => setTimeout(resolve, 2000))
    }
  }
  
  throw new Error(`Timeout esperando que la tabla ${tableName} est√© activa`)
}

/**
 * 3. INSERTAR DATOS DE MUESTRA DEL CURSO PMP
 */
async function insertSampleData() {
  console.log('\nüìö INSERTANDO DATOS DE MUESTRA - CURSO PMP')
  console.log('=' .repeat(50))
  
  // Datos del curso PMP
  const pmpCourse = {
    id: '1',
    title: 'Certificaci√≥n PMP Completa',
    description: 'Tu primer paso hacia el dominio de la direcci√≥n de proyectos a nivel global. ¬°Bienvenido a una experiencia transformadora! Este curso ha sido dise√±ado estrat√©gicamente para llevarte desde el conocimiento t√©cnico hasta la mentalidad de un Project Manager certificado, alineado con los est√°ndares globales del PMI¬Æ (Project Management Institute) y su gu√≠a insignia, el PMBOK¬Æ.',
    instructor: 'ING. Maritza Mart√≠nez Sahagun',
    thumbnail: '/assets/images/Image.svg',
    imageUrl: '/assets/images/course-pm.jpg',
    category: 'Management',
    level: 'beginner',
    duration: '100 horas',
    rating: 4.8,
    totalStudents: 1247,
    price: 99,
    tags: ['Project Management', 'Agile', 'Scrum', 'Leadership'],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    isPublished: true
  }
  
  // M√≥dulos del curso
  const modules = [
    {
      id: 'module_1',
      courseId: '1',
      title: 'Introducci√≥n al Project Management',
      description: 'Conceptos fundamentales y metodolog√≠as b√°sicas',
      order: 1
    },
    {
      id: 'module_2', 
      courseId: '1',
      title: 'Metodolog√≠as √Ågiles vs Tradicionales',
      description: 'Comparaci√≥n y aplicaci√≥n de diferentes enfoques',
      order: 2
    }
  ]
  
  // Lecciones del primer m√≥dulo
  const lessons = [
    {
      id: 'lesson_1_1',
      moduleId: 'module_1',
      courseId: '1',
      title: '¬øQu√© es Project Management?',
      description: 'Introducci√≥n a los conceptos b√°sicos de gesti√≥n de proyectos',
      type: 'video',
      duration: '15 min',
      order: 1,
      content: '<h2>¬øQu√© es Project Management?</h2><p>El Project Management o gesti√≥n de proyectos es la disciplina de planificar, organizar y gestionar recursos para llevar a cabo con √©xito la finalizaci√≥n de objetivos y metas espec√≠ficas de un proyecto.</p>',
      videoUrl: 'https://example.com/video1.mp4'
    },
    {
      id: 'lesson_1_2',
      moduleId: 'module_1', 
      courseId: '1',
      title: 'Historia y Evoluci√≥n del PM',
      description: 'Evoluci√≥n hist√≥rica de la gesti√≥n de proyectos',
      type: 'reading',
      duration: '20 min',
      order: 2,
      content: '<h2>Historia y Evoluci√≥n del Project Management</h2><p>La gesti√≥n de proyectos ha evolucionado significativamente desde sus or√≠genes en la construcci√≥n y la ingenier√≠a hasta convertirse en una disciplina aplicable a cualquier industria.</p>'
    },
    {
      id: 'lesson_2_1',
      moduleId: 'module_2',
      courseId: '1', 
      title: 'Metodolog√≠as √Ågiles vs Tradicionales',
      description: 'Comparaci√≥n detallada entre enfoques √°giles y tradicionales',
      type: 'video',
      duration: '25 min',
      order: 1,
      content: '<h2>Metodolog√≠as √Ågiles vs Tradicionales</h2><p>En este m√≥dulo exploraremos las diferencias fundamentales entre las metodolog√≠as √°giles y tradicionales de gesti√≥n de proyectos.</p>',
      videoUrl: 'https://example.com/video2.mp4'
    }
  ]
  
  try {
    // Insertar curso
    console.log('üìö Insertando curso PMP...')
    // await docClient.send(new PutCommand({ // This line was removed as per the new_code
    //   TableName: TABLES.COURSES.name,
    //   Item: pmpCourse
    // }))
    console.log('‚úÖ Curso PMP insertado')
    
    // Insertar m√≥dulos
    console.log('üìñ Insertando m√≥dulos...')
    for (const module of modules) {
      // await docClient.send(new PutCommand({ // This line was removed as per the new_code
      //   TableName: TABLES.MODULES.name,
      //   Item: module
      // }))
      console.log(`‚úÖ M√≥dulo "${module.title}" insertado`)
    }
    
    // Insertar lecciones
    console.log('üìù Insertando lecciones...')
    for (const lesson of lessons) {
      // await docClient.send(new PutCommand({ // This line was removed as per the new_code
      //   TableName: TABLES.LESSONS.name,
      //   Item: lesson
      // }))
      console.log(`‚úÖ Lecci√≥n "${lesson.title}" insertada`)
    }
    
    console.log('\nüéâ TODOS LOS DATOS INSERTADOS EXITOSAMENTE')
    
  } catch (error) {
    console.error('‚ùå ERROR AL INSERTAR DATOS:', error.message)
  }
}

/**
 * 4. FUNCI√ìN PRINCIPAL
 */
async function main() {
  console.log('üöÄ CONFIGURANDO DYNAMODB PARA INTELLILEARN')
  console.log('=' .repeat(60))
  
  try {
    // Crear todas las tablas
    console.log('\nüìã CREANDO TABLAS DE DYNAMODB...')
    
    for (const [key, tableConfig] of Object.entries(TABLES)) {
      const success = await createTable(tableConfig)
      if (!success) {
        console.error(`‚ùå FALL√ì LA CREACI√ìN DE TABLA: ${tableConfig.name}`)
        return
      }
    }
    
    console.log('\n‚úÖ TODAS LAS TABLAS CREADAS EXITOSAMENTE')
    
    // Insertar datos de muestra
    await insertSampleData()
    
    console.log('\nüéØ CONFIGURACI√ìN COMPLETADA')
    console.log('Ahora puedes consultar los datos con:')
    console.log('node scripts/query-dynamo.js')
    
  } catch (error) {
    console.error('‚ùå ERROR GENERAL:', error.message)
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  main()
}

module.exports = {
  createTable,
  insertSampleData,
  TABLES
} 